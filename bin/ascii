#!/usr/bin/env perl
use warnings;
use strict;
use open qw(locale);

use POSIX qw(ceil);
use Getopt::Long;

our $optControls;
our $optControlsOnly;
our $optBase = 16;
our $optLatin1;
our $optLatin1Only;
our $optRowMajor = 0;

Getopt::Long::Configure(qw(gnu_compat bundling no_ignore_case));
Getopt::Long::GetOptions(
    'help' => sub { help(); exit(0); },
    'c|controls'           => \$optControls,
    'C|controls-only'      => \$optControlsOnly,
    'o|octal'              => sub { $optBase = 8; },
    'd|decimal'            => sub { $optBase = 10; },
    'x|hexadecimal'        => sub { $optBase = 16; },
    'l|latin-1'            => \$optLatin1,
    'L|latin-1-only'       => \$optLatin1Only,
    'r|row-major-order'    => sub { $optRowMajor = 1; },
    'k|column-major-order' => sub { $optRowMajor = 0; },
) or die("Type 'ascii --help' for help.\n");

our %controls;                 # abbreviations to display for controls

printColumnMajorTable();

sub printColumnMajorTable {
    my @ranges;
    if ($optLatin1Only) {
        @ranges = ([160, 255]);
        if ($optControlsOnly) {
            @ranges = ([128, 159]);
        } elsif ($optControls) {
            @ranges = ([128, 255]);
        }
    } elsif ($optLatin1) {
        @ranges = ([32, 127], [160, 255]);
        if ($optControlsOnly) {
            @ranges = ([0, 31], [128, 159]);
        } elsif ($optControls) {
            @ranges = ([0, 255]);
        }
    } else {
        @ranges = ([32, 127]);
        if ($optControlsOnly) {
            @ranges = ([0, 31]);
        } elsif ($optControls) {
            @ranges = ([0, 127]);
        }
    }
    my $charCount = 0;
    foreach my $range (@ranges) {
        $charCount += $range->[1] - $range->[0] + 1;
    }
    my $width = 8;
    my $height = ceil($charCount / $width);
    for (my $row = 0; $row < $height; $row += 1) {
        for (my $col = 0; $col < $width; $col += 1) {
            print(' ') if $col;
            my $idx;
            if ($optRowMajor) {
                $idx = $row * $width + $col;
            } else {
                $idx = $col * $height + $row;
            }
            my $code;
            foreach my $range (@ranges) {
                if ($idx <= $range->[1] - $range->[0]) {
                    $code = $range->[0] + $idx;
                    last;
                }
                $idx -= ($range->[1] - $range->[0] + 1);
            }
            if (!defined $code) {
                print('         ');
                next;
            }
            if ($optBase == 16) {
                printf('0x%02x', $code);
            } elsif ($optBase == 10) {
                printf('%4d', $code);
            } elsif ($optBase == 8) {
                printf('0%03o', $code);
            }
            printf(' %-4s', char($code));
        }
        print("\n");
    }
}

sub help { print(<<"END"); }
usage:
    ascii [-c|--controls] [-C|--controls-only]
          [-x|--hexadecimal] [-o|--octal] [-d|--decimal]
          [--help]
END

sub char {
    my ($code) = @_;
    my $ctrl = $controls{$code};
    return chr($code) if !defined $ctrl;
    my $abbr = $ctrl->{abbr};
    return $abbr // chr($code);
}

BEGIN {
    %controls = (
        0x00 => { abbr => 'NUL' },
        0x01 => { abbr => 'SOH' },
        0x02 => { abbr => 'STX' },
        0x03 => { abbr => 'ETX' },
        0x04 => { abbr => 'EOT' },
        0x05 => { abbr => 'ENQ' },
        0x06 => { abbr => 'ACK' },
        0x07 => { abbr => 'BEL' },
        0x08 => { abbr => 'BS' },
        0x09 => { abbr => 'HT' },
        0x0a => { abbr => 'LF' },
        0x0b => { abbr => 'VT' },
        0x0c => { abbr => 'FF' },
        0x0d => { abbr => 'CR' },
        0x0e => { abbr => 'SO' }, # or LS1
        0x0f => { abbr => 'SI' }, # or LS0
        0x10 => { abbr => 'DLE' },
        0x11 => { abbr => 'DC1' },
        0x12 => { abbr => 'DC2' },
        0x13 => { abbr => 'DC3' },
        0x14 => { abbr => 'DC4' },
        0x15 => { abbr => 'NAK' },
        0x16 => { abbr => 'SYN' },
        0x17 => { abbr => 'ETB' },
        0x18 => { abbr => 'CAN' },
        0x19 => { abbr => 'EM' },
        0x1a => { abbr => 'SUB' },
        0x1b => { abbr => 'ESC' },
        0x1c => { abbr => 'IS4' },
        0x1d => { abbr => 'IS3' },
        0x1e => { abbr => 'IS2' },
        0x1f => { abbr => 'IS1' },
        0x20 => { abbr => 'SP' },
        0x7f => { abbr => 'DEL' },
        0x80 => { abbr => '--' },
        0x81 => { abbr => '--' },
        0x82 => { abbr => 'BPH' },
        0x83 => { abbr => 'NBH' },
        0x84 => { abbr => '--' },
        0x85 => { abbr => 'NEL' },
        0x86 => { abbr => 'SSA' },
        0x87 => { abbr => 'ESA' },
        0x88 => { abbr => 'HTS' },
        0x89 => { abbr => 'HTJ' },
        0x8a => { abbr => 'VTS' },
        0x8b => { abbr => 'PLD' },
        0x8c => { abbr => 'PLU' },
        0x8d => { abbr => 'RI' },
        0x8e => { abbr => 'SS2' },
        0x8f => { abbr => 'SS3' },
        0x90 => { abbr => 'DCS' },
        0x91 => { abbr => 'PU1' },
        0x92 => { abbr => 'PU2' },
        0x93 => { abbr => 'STS' },
        0x94 => { abbr => 'CCH' },
        0x95 => { abbr => 'MW' },
        0x96 => { abbr => 'SPA' },
        0x97 => { abbr => 'EPA' },
        0x98 => { abbr => 'SOS' },
        0x99 => { abbr => '--' },
        0x9a => { abbr => 'SCI' },
        0x9b => { abbr => 'CSI' },
        0x9c => { abbr => 'ST' },
        0x9d => { abbr => 'OSC' },
        0x9e => { abbr => 'PM' },
        0x9f => { abbr => 'APC' },
        0xa0 => { abbr => 'NBSP' },
    );
}
