#!/usr/bin/env perl
use warnings;
use strict;
use open IO => qw(:locale);
use Term::ReadKey qw(GetTerminalSize);
use POSIX qw(floor ceil);
use Getopt::Long;
use Unicode::UCD qw(charinfo);
use Text::Wrap qw(wrap);
use POSIX qw(dup dup2);

our $ascii      = 1;
our $latin_1    = 0;
our $base       = 16;
our $table_type = 1;
our $row_major  = 0;

Getopt::Long::Configure(qw(gnu_getopt));
Getopt::Long::GetOptions("l|latin-1"           => \$latin_1,
                         "L|latin-1-only"      => sub { $latin_1 = 1; $ascii = 0; },
                         "A|no-ascii"          => sub { $ascii = 0; },
                         "h|hex|hexadecimal"   => sub { $base = 16; },
                         "d|dec|decimal"       => sub { $base = 10; },
                         "o|oct|octal"         => sub { $base = 8; },
                         "t|table-type|type=i" => \$table_type,
                         "r|row-major"         => \$row_major,
                         "1"                   => sub { $table_type = 1; },
                         "2"                   => sub { $table_type = 2; },
                         "3"                   => sub { $table_type = 3; },
) or die(":-(");

if (($table_type <= 1 || $table_type == 3) && $row_major) {
    die("ascii: --row-major does not make sense with table type $table_type\n");
}

if (!$ascii && !$latin_1) {
    $latin_1 = 1;
}

our $TERM_WIDTH;
our %CHAR_INFO_2;

our ($start_at, $end_at) = (0, 127);
if ($latin_1) {
    if ($ascii) {
        ($start_at, $end_at) = (0, 255);
    } else {
        ($start_at, $end_at) = (128, 255);
    }
}

if ($table_type <= 1) {
    ascii_table_1();
} elsif ($table_type == 2) {
    ascii_table_2();
} elsif ($table_type >= 3) {
    ascii_table_3();
}


sub ascii_table_1 {
    print(" " x 4);
    for (my $col = 0; $col < 16; $col += 1) {
        printf("   %1X", $col);
    }
    print("\n");
    print(" " x 5, " ---" x 16, "\n");
    for (my $row = floor($start_at / 16); $row <= floor($end_at / 16); $row += 1) {
        printf("0x%1X |", $row);
        for (my $col = 0; $col < 16; $col += 1) {
            my $codepoint = $row * 16 + $col;
            print(disp_char($codepoint));
        }
        print("\n");
    }
}

sub ascii_table_2 {
    print(join("  ", ("--------") x 8) . "\n");
    my $row_count = floor((1 + $end_at - $start_at) / 8);
    my $column_count = ceil(($end_at - $start_at + 1) / $row_count);
    for (my $row = 0; $row < $row_count; $row += 1) {
        for (my $col = 0; $col < 8; $col += 1) {
            if ($col) {
                print(" ");
            }
            my $codepoint = $start_at + $col * $row_count + $row;
            if ($row_major) {
                $codepoint = $start_at + $col + $row * $column_count;
            }
            if ($base == 16) {
                printf("0x%02X%s", $codepoint, disp_char($codepoint));
            } elsif ($base == 10) {
                printf("%4d%s", $codepoint, disp_char($codepoint));
            } elsif ($base == 8) {
                printf("0%03o%s", $codepoint, disp_char($codepoint));
            }
        }
        print("\n");
    }
}

sub ascii_table_3 {
    print("Codepoint   Char  Name (Unicode 1.0) [Alternate]\n");
    print("----------  ----  --------------------------------------------------------------\n");
    for (my $codepoint = $start_at; $codepoint <= $end_at; $codepoint += 1) {
        my $u = sprintf("U+%04X", $codepoint);
        if ($base == 10) {
            $u = sprintf("%6d", $codepoint);
        } elsif ($base == 8) {
            $u = sprintf("0%02o", $codepoint);
        }
        my $charinfo = charinfo($codepoint);
        my $name      = $charinfo->{name};
        my $unicode10 = $charinfo->{unicode10};
        undef $name      if defined $name      && $name      !~ /\S/;
        undef $unicode10 if defined $unicode10 && $unicode10 !~ /\S/;

        # Delete certain Unicode 1.0 names if they're too similar (as
        # deemed by yours truly) to the current Unicode names.
        if (defined $unicode10 && defined $name) {
            my $unicode10_2 = $name;
            $unicode10_2 =~ s/ WITH / /g;
            if ($unicode10_2 eq $unicode10) {
                $unicode10 = undef;
            }
        }

        my @names;
        my $char_info_2 = $CHAR_INFO_2{$codepoint};
        my $alt_name = defined $char_info_2 ? $char_info_2->{alt_name} : undef;
        if (ref($alt_name) eq 'ARRAY') {
            $alt_name = join(', ', @$alt_name);
        }

        if (defined $name) {
            push(@names, $name);
        }
        if (defined $unicode10 && $unicode10 =~ /\S/) {
            push(@names, sprintf("(%s)", $unicode10));
        }
        if (defined $alt_name) {
            push(@names, sprintf("[%s]", $alt_name));
        }

        # While we wrap text, we don't break each of the displayed
        # character names.  We replace the # with spaces later.
        s/ /#/g foreach @names;

        my $disp_name = join(" ", grep { defined $_ && /\S/ } @names);
        my $line = sprintf("%10s  %-4.4s  %s", $u, disp_char($codepoint), $disp_name);
        $line = wrap('', ' ' x 18, $line);
        $line =~ s/#/ /g;
        print("$line\n");
    }
}

sub disp_char {
    my ($codepoint) = @_;
    my $char_info_2 = $CHAR_INFO_2{$codepoint};
    my $is_control = defined $char_info_2 ? $char_info_2->{control} : undef;
    my $is_graph   = defined $char_info_2 ? $char_info_2->{graph}   : 1; # all controls listed in %CHAR_INFO_2
    my $abbr       = defined $char_info_2 ? $char_info_2->{abbr}    : undef;
    my $esc        = defined $char_info_2 ? $char_info_2->{esc}     : undef;
    if ($table_type <= 1) {
        return sprintf("  %c ", $codepoint) if $is_graph;
        return sprintf("%-4.4s", $abbr) if defined $abbr && length($abbr) >= 4;
        return sprintf(" %-3.3s", $abbr) if defined $abbr;
        return " ---";
    } elsif ($table_type == 2) {
        return sprintf(" %c   ", $codepoint) if $is_graph;
        return sprintf(" %-4.4s", $abbr) if defined $abbr && length($abbr) >= 4;
        return sprintf(" %-3.3s ", $abbr) if defined $abbr;
        return " --- ";
    } elsif ($table_type >= 3) {
        return sprintf(" %c  ", $codepoint) if $is_graph;
        return sprintf("%-4.4s", $abbr) if defined $abbr && length($abbr) >= 4;
        return sprintf("%-3.3s ", $abbr) if defined $abbr;
        return "--- ";
    }
}

INIT {
    # Silence a warning when not running in a TTY, part 1.
    my $stderr_fd = fileno(\*STDERR);
    my $fd = dup($stderr_fd);
    close(\*STDERR);

    $TERM_WIDTH = GetTerminalSize();

    # Silence a warning when not running in a TTY, part 2, restore
    # stderr.
    dup2($fd, $stderr_fd);
    close($fd);
}

BEGIN {
    our %CHAR_INFO_2 = (
        0   => { graph => 0, control => 1, abbr => "NUL" },
        1   => { graph => 0, control => 1, abbr => "SOH" },
        2   => { graph => 0, control => 1, abbr => "STX" },
        3   => { graph => 0, control => 1, abbr => "ETX" },
        4   => { graph => 0, control => 1, abbr => "EOT" },
        5   => { graph => 0, control => 1, abbr => "ENQ" },
        6   => { graph => 0, control => 1, abbr => "ACK" },
        7   => { graph => 0, control => 1, abbr => "BEL", esc => "\\a", alt_name => "ALERT" },
        8   => { graph => 0, control => 1, abbr => "BS",  esc => "\\b"  },
        9   => { graph => 0, control => 1, abbr => "HT",  esc => "\\t", alt_name => "HORIZONTAL TABULATION" },
        10  => { graph => 0, control => 1, abbr => "LF",  esc => "\\n"  },
        11  => { graph => 0, control => 1, abbr => "VT",  esc => "\\v", alt_name => "VERTICAL TABULATION" },
        12  => { graph => 0, control => 1, abbr => "FF",  esc => "\\f"  },
        13  => { graph => 0, control => 1, abbr => "CR",  esc => "\\r"  },
        14  => { graph => 0, control => 1, abbr => "SO"  },
        15  => { graph => 0, control => 1, abbr => "SI"  },
        16  => { graph => 0, control => 1, abbr => "DLE" },
        17  => { graph => 0, control => 1, abbr => "DC1", alt_name => "XON" },
        18  => { graph => 0, control => 1, abbr => "DC2" },
        19  => { graph => 0, control => 1, abbr => "DC3", alt_name => "XOFF" },
        20  => { graph => 0, control => 1, abbr => "DC4" },
        21  => { graph => 0, control => 1, abbr => "NAK" },
        22  => { graph => 0, control => 1, abbr => "SYN" },
        23  => { graph => 0, control => 1, abbr => "ETB" },
        24  => { graph => 0, control => 1, abbr => "CAN" },
        25  => { graph => 0, control => 1, abbr => "EM"  },
        26  => { graph => 0, control => 1, abbr => "SUB" },
        27  => { graph => 0, control => 1, abbr => "ESC" },
        28  => { graph => 0, control => 1, abbr => "FS", alt_name => "FILE SEPARATOR"  },
        29  => { graph => 0, control => 1, abbr => "GS", alt_name => "GROUP SEPARATOR"  },
        30  => { graph => 0, control => 1, abbr => "RS", alt_name => "RECORD SEPARATOR"  },
        31  => { graph => 0, control => 1, abbr => "US", alt_name => "UNIT SEPARATOR"  },
        32  => { graph => 0, control => 0, abbr => "SP"  },
        127 => { graph => 0, control => 1, abbr => "DEL" },
        128 => { graph => 0, control => 1, abbr => "PAD", abbr_unofficial => 1, alt_name => "PADDING CHARACTER" },
        129 => { graph => 0, control => 1, abbr => "HOP", abbr_unofficial => 1, alt_name => "HIGH OCTET PRESET" },
        130 => { graph => 0, control => 1, abbr => "BPH" },
        131 => { graph => 0, control => 1, abbr => "NBH" },
        132 => { graph => 0, control => 1, abbr => "IND", abbr_deprecated => 1, alt_name => "INDEX" },
        133 => { graph => 0, control => 1, abbr => "NEL" },
        134 => { graph => 0, control => 1, abbr => "SSA" },
        135 => { graph => 0, control => 1, abbr => "ESA" },
        136 => { graph => 0, control => 1, abbr => "HTS", alt_name => "HORIZONTAL TABULATION SET" },
        137 => { graph => 0, control => 1, abbr => "HTJ", alt_name => "HORIZONTAL TABULATION WITH JUSTIFICATION" },
        138 => { graph => 0, control => 1, abbr => "VTS", alt_name => "VERTICAL TABULATION SET" },
        139 => { graph => 0, control => 1, abbr => "PLD", alt_name => "PARTIAL LINE DOWN" },
        140 => { graph => 0, control => 1, abbr => "PLU", alt_name => "PARTIAL LINE UP" },
        141 => { graph => 0, control => 1, abbr => "RI", alt_name => "REVERSE INDEX" },
        142 => { graph => 0, control => 1, abbr => "SS2" },
        143 => { graph => 0, control => 1, abbr => "SS3" },
        144 => { graph => 0, control => 1, abbr => "DCS" },
        145 => { graph => 0, control => 1, abbr => "PU1" },
        146 => { graph => 0, control => 1, abbr => "PU2" },
        147 => { graph => 0, control => 1, abbr => "STS" },
        148 => { graph => 0, control => 1, abbr => "CCH" },
        149 => { graph => 0, control => 1, abbr => "MW" },
        150 => { graph => 0, control => 1, abbr => "SPA", alt_name => "START OF GUARDED AREA" },
        151 => { graph => 0, control => 1, abbr => "EPA", alt_name => "END OF GUARDED AREA" },
        152 => { graph => 0, control => 1, abbr => "SOS" },
        153 => { graph => 0, control => 1, abbr => "SGC", alt_name => "SINGLE GRAPHIC CHARACTER INTRODUCER" },
        154 => { graph => 0, control => 1, abbr => "SCI" },
        155 => { graph => 0, control => 1, abbr => "CSI" },
        156 => { graph => 0, control => 1, abbr => "ST" },
        157 => { graph => 0, control => 1, abbr => "OSC" },
        158 => { graph => 0, control => 1, abbr => "PM" },
        159 => { graph => 0, control => 1, abbr => "ASC" },
        160 => { graph => 0, control => 0, abbr => "NBSP" },
    );
}
