#!/usr/bin/env perl
use warnings;
use strict;
use open qw(:locale);
use POSIX qw(ceil);
use Getopt::Long;
use Term::ReadKey qw(GetTerminalSize);

our $termColumnCount = GetTerminalSize() // 80;

our $optControls;
our $optBase = 16;
our $optLatin1;
our $optLatin1Only;
our $optCyrillic;
our $optCyrillicOnly;
our $optRowMajor = 0;
our $optAlternate = 0;
our $optShort = 0;

Getopt::Long::Configure(qw(gnu_compat bundling no_ignore_case));
Getopt::Long::GetOptions(
    'help' => sub { help(); exit(0); },
    'c|controls'           => \$optControls,
    'o|octal'              => sub { $optBase = 8; },
    'd|decimal'            => sub { $optBase = 10; },
    'x|hexadecimal'        => sub { $optBase = 16; },
    'l|latin-1'            => \$optLatin1,
    'L|latin-1-only'       => \$optLatin1Only,
    'latin-5|cyrillic'           => \$optCyrillic,
    'latin-5-only|cyrillic-only' => \$optCyrillicOnly,
    'r|row-major-order'    => sub { $optRowMajor = 1; },
    'k|column-major-order' => sub { $optRowMajor = 0; },
    'a|alternate'          => sub { $optAlternate = 1; $optRowMajor = 1; },
    's|short'              => \$optShort,
) or die("Type 'ascii --help' for help.\n");

our %controls;                 # abbreviations to display for controls

if ($optShort) {
    printShort();
} elsif ($optAlternate) {
    printAlternateTable();
} else {
    printTable();
}

sub printShort {
    my @ranges = ranges();
    my $termColumnCount = $termColumnCount - 16;
    foreach my $range (@ranges) {
        my $low = $range->[0] & ~15;
        my $high = $range->[1] | 15;
        my $charCount = $high - $low + 1;
        my $rowCount = ceil($charCount / $termColumnCount);
        my $columnCount = ceil($charCount / $rowCount);
        for (my $row = 0; $row < $rowCount; $row += 1) {
            my $rowLow = $low + $columnCount * $row;
            my $rowHigh = $rowLow + $columnCount - 1;
            printf("%6x  ", $rowLow);
            print(join("", map { char($_, 1) } ($rowLow .. $rowHigh)));
            printf("  %6x", $rowHigh);
            print("\n");
        }
    }
}

sub printTable {
    my @ranges = ranges();
    my $charCount = computeCharCount(@ranges);
    my $width = 8;
    my $height = ceil($charCount / $width);
    for (my $row = 0; $row < $height; $row += 1) {
        for (my $col = 0; $col < $width; $col += 1) {
            print(' ') if $col;
            my $idx = computeIndex($width, $height, $col, $row);
            my $code = computeCodeFromIndex($idx, @ranges);
            if (!defined $code) {
                print('         ');
                next;
            }
            if ($optBase == 16) {
                printf('0x%02x', $code);
            } elsif ($optBase == 10) {
                printf('%4d', $code);
            } elsif ($optBase == 8) {
                printf('0%03o', $code);
            }
            printf(' %-4s', char($code));
        }
        print("\n");
    }
}

sub printAlternateTable {
    my @ranges = ranges();
    my $charCount = computeCharCount(@ranges);
    my $width = 16;
    my $height = ceil($charCount / $width);
    for (my $row = 0; $row < $height; $row += 1) {
        for (my $col = 0; $col < $width; $col += 1) {
            print(' ') if $col;
            my $idx = computeIndex($width, $height, $col, $row);
            my $code = computeCodeFromIndex($idx, @ranges);
            if (!defined $code) {
                print('    ');
                next;
            }
            if ($optBase == 16) {
                printf('0x%02x', $code);
            } elsif ($optBase == 10) {
                printf('%4d', $code);
            } elsif ($optBase == 8) {
                printf('0%03o', $code);
            }
        }
        print("\n");
        for (my $col = 0; $col < $width; $col += 1) {
            print(' ') if $col;
            my $idx = computeIndex($width, $height, $col, $row);
            my $code = computeCodeFromIndex($idx, @ranges);
            if (!defined $code) {
                print('    ');
                next;
            }
            printf('%-4s', char($code));
        }
        print("\n");
    }
}

sub ranges {
    my @ranges;
    if ($optControls) {
        if (!$optLatin1Only && !$optCyrillicOnly) {
            push(@ranges, [0, 31]);
        }
    }
    if (!$optLatin1Only && !$optCyrillicOnly) {
        push(@ranges, [32, 127]);
    }
    if ($optLatin1Only || $optLatin1) {
        if ($optControls) {
            push(@ranges, [128, 159]);
        }
    }
    if ($optCyrillicOnly || $optCyrillic) {
        push(@ranges, [0x0400, 0x045f]);
    }
    return @ranges;
}

sub computeCharCount {
    my (@ranges) = @_;
    my $count = 0;
    foreach my $range (@ranges) {
        $count += $range->[1] - $range->[0] + 1;
    }
    return $count;
}

sub computeIndex {
    my ($width, $height, $col, $row) = @_;
    if ($optRowMajor) {
        return $row * $width + $col;
    }
    return $col * $height + $row;
}

sub computeCodeFromIndex {
    my ($idx, @ranges) = @_;
    my $code;
    foreach my $range (@ranges) {
        if ($idx <= $range->[1] - $range->[0]) {
            return $range->[0] + $idx;
        }
        $idx -= ($range->[1] - $range->[0] + 1);
    }
    return;
}

sub help { print(<<"END"); }
usage:
    ascii [-c|--controls]
          [-l|--latin-1] [-L|--latin-1-only]
          [-x|--hexadecimal] [-o|--octal] [-d|--decimal]
          [-r|--row-major-order] [-k|--column-major-order]
          [-a|--alternate]
          [--help]
END

sub char {
    my ($code, $maxLen) = @_;
    return ' ' if $code == 127 && defined $maxLen && $maxLen == 1;
    my $ctrl = $controls{$code};
    if (!defined $ctrl) {
        return chr($code);
    }
    my $abbr = $ctrl->{abbr};
    if (defined $abbr) {
        if (!defined $maxLen) {
            return $abbr;
        }
        if (length($abbr) <= $maxLen) {
            return $abbr;
        }
        return ' ';
    }
    return chr($code);
}

BEGIN {
    # https://en.wikipedia.org/wiki/Unicode_alias_names_and_abbreviations
    %controls = (
        0x00 => { abbr => 'NUL' },
        0x01 => { abbr => 'SOH' },
        0x02 => { abbr => 'STX' },
        0x03 => { abbr => 'ETX' },
        0x04 => { abbr => 'EOT' },
        0x05 => { abbr => 'ENQ' },
        0x06 => { abbr => 'ACK' },
        0x07 => { abbr => 'BEL' },
        0x08 => { abbr => 'BS' },
        0x09 => { abbr => 'HT' },
        0x0a => { abbr => 'LF' },
        0x0b => { abbr => 'VT' },
        0x0c => { abbr => 'FF' },
        0x0d => { abbr => 'CR' },
        0x0e => { abbr => 'SO' }, # or LS1
        0x0f => { abbr => 'SI' }, # or LS0
        0x10 => { abbr => 'DLE' },
        0x11 => { abbr => 'DC1' },
        0x12 => { abbr => 'DC2' },
        0x13 => { abbr => 'DC3' },
        0x14 => { abbr => 'DC4' },
        0x15 => { abbr => 'NAK' },
        0x16 => { abbr => 'SYN' },
        0x17 => { abbr => 'ETB' },
        0x18 => { abbr => 'CAN' },
        0x19 => { abbr => 'EM' },
        0x1a => { abbr => 'SUB' },
        0x1b => { abbr => 'ESC' },
        0x1c => { abbr => 'IS4' },
        0x1d => { abbr => 'IS3' },
        0x1e => { abbr => 'IS2' },
        0x1f => { abbr => 'IS1' },
        0x20 => { abbr => 'SP' },
        0x7f => { abbr => 'DEL' },
        0x80 => { abbr => '--' },
        0x81 => { abbr => '--' },
        0x82 => { abbr => 'BPH' },
        0x83 => { abbr => 'NBH' },
        0x84 => { abbr => '--' },
        0x85 => { abbr => 'NEL' },
        0x86 => { abbr => 'SSA' },
        0x87 => { abbr => 'ESA' },
        0x88 => { abbr => 'HTS' },
        0x89 => { abbr => 'HTJ' },
        0x8a => { abbr => 'VTS' },
        0x8b => { abbr => 'PLD' },
        0x8c => { abbr => 'PLU' },
        0x8d => { abbr => 'RI' },
        0x8e => { abbr => 'SS2' },
        0x8f => { abbr => 'SS3' },
        0x90 => { abbr => 'DCS' },
        0x91 => { abbr => 'PU1' },
        0x92 => { abbr => 'PU2' },
        0x93 => { abbr => 'STS' },
        0x94 => { abbr => 'CCH' },
        0x95 => { abbr => 'MW' },
        0x96 => { abbr => 'SPA' },
        0x97 => { abbr => 'EPA' },
        0x98 => { abbr => 'SOS' },
        0x99 => { abbr => '--' },
        0x9a => { abbr => 'SCI' },
        0x9b => { abbr => 'CSI' },
        0x9c => { abbr => 'ST' },
        0x9d => { abbr => 'OSC' },
        0x9e => { abbr => 'PM' },
        0x9f => { abbr => 'APC' },
        0xa0 => { abbr => 'NBSP' },
        0x200b => { abbr => 'ZWSP' },
        0x200c => { abbr => 'ZWNJ' },
        0x200d => { abbr => 'ZWJ' },
        0x200e => { abbr => 'LRM' },   # LEFT-TO-RIGHT MARK
        0x200f => { abbr => 'RLM' },   # RIGHT-TO-LEFT MARK
        0x202a => { abbr => 'LRE' },   # LEFT-TO-RIGHT EMBEDDING
        0x202b => { abbr => 'RLE' },   # RIGHT-TO-LEFT EMBEDDING
        0x202c => { abbr => 'PDF' },   # POP DIRECTIONAL FORMATTING
        0x202d => { abbr => 'LRO' },   # LEFT-TO-RIGHT OVERRIDE
        0x202e => { abbr => 'RLO' },   # RIGHT-TO-LEFT OVERRIDE
        0x202f => { abbr => 'NNBSP' }, # NARROW NO-BREAK SPACE
        0x205f => { abbr => 'MMSP' },  # MEDIUM MATHEMATICAL SPACE
        0x2060 => { abbr => 'WJ'   },  # WORD JOINER
        0x2066 => { abbr => 'LRI'  },  # LEFT-TO-RIGHT ISOLATE
        0x2067 => { abbr => 'RLI'  },  # RIGHT-TO-LEFT ISOLATE
        0x2068 => { abbr => 'FSI'  },  # FIRST STRONG ISOLATE
        0x2069 => { abbr => 'PDI'  },  # POP DIRECTIONAL ISOLATE
        0xFE00 => { abbr => 'VS1' },   # VARIATION SELECTOR-1
        0xFE01 => { abbr => 'VS2' },   # VARIATION SELECTOR-2
        0xFE02 => { abbr => 'VS3' },   # VARIATION SELECTOR-3
        0xFE03 => { abbr => 'VS4' },   # VARIATION SELECTOR-4
        0xFE04 => { abbr => 'VS5' },   # VARIATION SELECTOR-5
        0xFE05 => { abbr => 'VS6' },   # VARIATION SELECTOR-6
        0xFE06 => { abbr => 'VS7' },   # VARIATION SELECTOR-7
        0xFE07 => { abbr => 'VS8' },   # VARIATION SELECTOR-8
        0xFE08 => { abbr => 'VS9' },   # VARIATION SELECTOR-9
        0xFE09 => { abbr => 'VS10' },  # VARIATION SELECTOR-10
        0xFE0A => { abbr => 'VS11' },  # VARIATION SELECTOR-11
        0xFE0B => { abbr => 'VS12' },  # VARIATION SELECTOR-12
        0xFE0C => { abbr => 'VS13' },  # VARIATION SELECTOR-13
        0xFE0D => { abbr => 'VS14' },  # VARIATION SELECTOR-14
        0xFE0E => { abbr => 'VS15' },  # VARIATION SELECTOR-15
        0xFE0F => { abbr => 'VS16' },  # VARIATION SELECTOR-16
        0xFEFF => { abbr => 'ZWNBSP', abbr2 => 'BOM' }, # ZERO WIDTH NO-BREAK SPACE (BYTE ORDER MARK)
        0x070f => { abbr => 'SAM' }, # SYRIAC ABBREVIATION MARK
   );
}
