#!/usr/bin/env perl
use warnings;
use strict;
use open qw(locale);

use POSIX qw(ceil);
use Getopt::Long;

our $optControls;
our $optControlsOnly;
our $optBase = 16;

Getopt::Long::Configure(qw(gnu_compat bundling no_ignore_case));
Getopt::Long::GetOptions(
    'help' => sub { help(); exit(0); },
    'c|controls'      => \$optControls,
    'C|controls-only' => \$optControlsOnly,
    'o|octal'         => sub { $optBase = 8; },
    'd|decimal'       => sub { $optBase = 10; },
    'x|hexadecimal'   => sub { $optBase = 16; },
) or die("Type 'ascii --help' for help.\n");

our %controls;                 # abbreviations to display for controls

printColumnMajorTable();

sub printColumnMajorTable {
    my $from = 32;
    my $to = 127;
    if ($optControls) {
        $from = 0;
    } elsif ($optControlsOnly) {
        $from = 0;
        $to = 31;
    }
    my $width = 8;
    my $height = ceil(($to - $from + 1) / $width);
    for (my $row = 0; $row < $height; $row += 1) {
        for (my $col = 0; $col < $width; $col += 1) {
            print('  ') if $col;
            my $code = $from + $col * $height + $row;
            if ($optBase == 16) {
                printf('0x%02x', $code);
            } elsif ($optBase == 10) {
                printf('%4d', $code);
            } elsif ($optBase == 8) {
                printf('0%03o', $code);
            }
            printf(' %-3s', char($code));
        }
        print("\n");
    }
}

sub help { print(<<"END"); }
usage:
    ascii [-c|--controls] [-C|--controls-only]
          [-x|--hexadecimal] [-o|--octal] [-d|--decimal]
          [--help]
END

sub char {
    my ($code) = @_;
    my $ctrl = $controls{$code};
    return chr($code) if !defined $ctrl;
    my $abbr = $ctrl->{abbr};
    return $abbr // chr($code);
}

BEGIN {
    %controls = (
        0x00 => { abbr => 'NUL' },
        0x01 => { abbr => 'SOH' },
        0x02 => { abbr => 'STX' },
        0x03 => { abbr => 'ETX' },
        0x04 => { abbr => 'EOT' },
        0x05 => { abbr => 'ENQ' },
        0x06 => { abbr => 'ACK' },
        0x07 => { abbr => 'BEL' },
        0x08 => { abbr => 'BS' },
        0x09 => { abbr => 'HT' },
        0x0a => { abbr => 'LF' },
        0x0b => { abbr => 'VT' },
        0x0c => { abbr => 'FF' },
        0x0d => { abbr => 'CR' },
        0x0e => { abbr => 'SO' }, # or LS1
        0x0f => { abbr => 'SI' }, # or LS0
        0x10 => { abbr => 'DLE' },
        0x11 => { abbr => 'DC1' },
        0x12 => { abbr => 'DC2' },
        0x13 => { abbr => 'DC3' },
        0x14 => { abbr => 'DC4' },
        0x15 => { abbr => 'NAK' },
        0x16 => { abbr => 'SYN' },
        0x17 => { abbr => 'ETB' },
        0x18 => { abbr => 'CAN' },
        0x19 => { abbr => 'EM' },
        0x1a => { abbr => 'SUB' },
        0x1b => { abbr => 'ESC' },
        0x1c => { abbr => 'IS4' },
        0x1d => { abbr => 'IS3' },
        0x1e => { abbr => 'IS2' },
        0x1f => { abbr => 'IS1' },
        0x20 => { abbr => 'SP' },
        0x7f => { abbr => 'DEL' },
    );
}
